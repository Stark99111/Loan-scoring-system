import React, { useEffect, useState } from "react";
import { Box, Typography } from "@mui/material";
import CustomDataGrid from "../../../../Components/CustomDataGrid"; // Assuming this is your DataGrid component

const ScoringAdvice = ({ components }) => {
  const [scoringDesc, setScoringDesc] = useState([]);

  const generateScoringAdvice = (components) => {
    return components.map(({ label, value, maxValue }) => {
      const percent = (value / maxValue) * 100;
      let adviceList = [];

      if (percent >= 90) {
        adviceList.push(
          "üéâ –ú–∞—à —Å–∞–π–Ω! –¢–∞ —ç–Ω—ç “Ø–∑“Ø“Ø–ª—ç–ª—Ç –¥—ç—ç—Ä ”©–Ω–¥”©—Ä –æ–Ω–æ–æ –∞–≤—Å–∞–Ω –±–∞–π–Ω–∞. –ò–π–º –±–∞–π–¥–ª–∞–∞ —Ö–∞–¥–≥–∞–ª–∞–∞—Ä–∞–π."
        );
      } else if (percent >= 60) {
        switch (label) {
          case "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞–Ω–∫–µ—Ç":
            adviceList = [
              "–¢–∞–Ω—ã –±“Ø—Ä–¥“Ø“Ø–ª—Å—ç–Ω –∞–Ω–∫–µ—Ç –±–æ–ª–æ–º–∂–∏–π–Ω —Å–∞–π–Ω –±–∞–π–Ω–∞.",
            ];
            break;
          case "–û–¥–æ–æ–≥–∏–π–Ω ”©—Ä–∏–π–Ω —Ö—ç–º–∂—ç—ç":
            adviceList = [
              "–¢–∞–Ω—ã ”©—Ä–∏–π–Ω —Ö—ç–º–∂—ç—ç –¥—É–Ω–¥ —Ç“Ø–≤—à–∏–Ω–¥ –±–∞–π–Ω–∞.",
              "–®–∏–Ω—ç –∑—ç—ç–ª –∞–≤–∞—Ö–¥–∞–∞ –∞–Ω—Ö–∞–∞—Ä–∞–ª—Ç–∞–π –±–∞–π–∂, –æ–¥–æ–æ–≥–∏–π–Ω ”©—Ä”©”© —Ç”©–ª–∂ –¥—É—É—Å–≥–∞—Ö—ã–≥ —Ö–∏—á—ç—ç–≥—ç—ç—Ä—ç–π.",
            ];
            break;
          case "–ó—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö–∏–π–Ω —É—Ä—Ç":
            adviceList = [
              "–ó—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö –¥—É–Ω–¥ —Ç“Ø–≤—à–∏–Ω–¥ –±–∞–π–Ω–∞.",
              "–¢–æ–≥—Ç–º–æ–ª —Ö—É–≥–∞—Ü–∞–∞—Ç–∞–π –∑—ç—ç–ª–∏–π–Ω —Ç”©–ª”©—Ç–∏–π–≥ —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ –Ω—å —Ö–∏–π—Ö –Ω—å —Ç—É—Å –æ–Ω–æ–æ–≥ ”©—Å–≥”©–Ω”©.",
            ];
            break;
          case "–ß–∞–Ω–∞—Ä–≥“Ø–π –∑—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö":
            adviceList = [
              "–¢–∞–Ω—ã —á–∞–Ω–∞—Ä–≥“Ø–π –∑—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö –±–∞–≥–∞—Å–∞–∂ –±–∞–π–≥–∞–∞ –Ω—å —Å–∞–π–Ω —Ö—ç—Ä—ç–≥.",
              "–®–∏–Ω—ç –∑—ç—ç–ª–∏–π–Ω —Ç”©–ª–±”©—Ä–∏–π–≥ —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ –Ω—å —Ç”©–ª–∂ —Ö—ç–≤—à–≤—ç–ª –æ–Ω–æ–æ —É–ª–∞–º ”©—Å–Ω”©.",
            ];
            break;
          case "”®—Ä –æ—Ä–ª–æ–≥—ã–Ω —Ö–∞—Ä—å—Ü–∞–∞":
            adviceList = [
              "–¢–∞–Ω—ã ”©—Ä –æ—Ä–ª–æ–≥—ã–Ω —Ö–∞—Ä—å—Ü–∞–∞ –¥—É–Ω–¥ —Ç“Ø–≤—à–∏–Ω–¥ –±–∞–π–Ω–∞.",
              "”®—Ä–∏–π–≥ –±—É—É—Ä—É—É–ª–∞—Ö –±–æ–ª–æ–Ω –æ—Ä–ª–æ–≥–æ–æ –Ω—ç–º—ç–≥–¥“Ø“Ø–ª—ç—Ö –Ω—å –æ–Ω–æ–æ–Ω–¥ —Å–∞–π–Ω–∞–∞—Ä –Ω”©–ª”©”©–ª–Ω”©.",
            ];
            break;
          default:
            adviceList = ["–°–∞–π–∂—Ä—É—É–ª–∞—Ö –±–æ–ª–æ–º–∂ –±–∞–π–≥–∞–∞ —Ç—É–ª –∞–Ω—Ö–∞–∞—Ä—á “Ø–∑—ç—ç—Ä—ç–π."];
        }
      } else {
        switch (label) {
          case "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –∞–Ω–∫–µ—Ç":
            adviceList = [
              "–ê–Ω–∫–µ—Ç—ã–Ω –º—ç–¥—ç—ç–ª—ç–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞ —Ö–∞–Ω–≥–∞–∞–≥“Ø–π –±–∞–π–Ω–∞.",
            ];
            break;
          case "–û–¥–æ–æ–≥–∏–π–Ω ”©—Ä–∏–π–Ω —Ö—ç–º–∂—ç—ç":
            adviceList = [
              "–¢–∞–Ω—ã ”©—Ä ”©–Ω–¥”©—Ä –±–∞–π–Ω–∞. –®–∏–Ω—ç –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞—Ö–∞–∞—Å —Ç“Ø—Ä —Ç“Ø–¥–≥—ç–ª–∑—ç—ç—Ä—ç–π.",
              "–û–¥–æ–æ–≥–∏–π–Ω ”©—Ä”©”© —Ç”©–ª–∂ –±–∞–≥–∞—Å–≥–∞—Ö—ã–≥ –∑–æ—Ä—å.",
            ];
            break;
          case "–ó—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö–∏–π–Ω —É—Ä—Ç":
            adviceList = [
              "–¢–∞–Ω—ã –∑—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö –±–æ–≥–∏–Ω–æ –±–∞–π–Ω–∞.",
              "–£—Ä—Ç —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ —Ç–æ–≥—Ç–≤–æ—Ä—Ç–æ–π –∑—ç—ç–ª—Ç—ç–π –±–∞–π–∂, —Å–∞–π–Ω —Ç”©–ª”©–ª—Ç —Ö–∏–π—Å–Ω—ç—ç—Ä –æ–Ω–æ–æ –Ω—ç–º—ç–≥–¥—ç—Ö –±–æ–ª–æ–º–∂—Ç–æ–π.",
            ];
            break;
          case "–ß–∞–Ω–∞—Ä–≥“Ø–π –∑—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö":
            adviceList = [
              "–ß–∞–Ω–∞—Ä–≥“Ø–π –∑—ç—ç–ª–∏–π–Ω —Ç–æ–æ –∏—Ö –±–∞–π–Ω–∞. –≠–Ω—ç –Ω—å —Ç–∞–Ω—ã –∑—ç—ç–ª–∏–π–Ω –æ–Ω–æ–æ–≥ –±—É—É—Ä—É—É–ª–¥–∞–≥.",
              "–ò—Ä—ç—ç–¥“Ø–π–¥ –±“Ø—Ö —Ç”©–ª–±”©—Ä–∏–π–≥ —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ –Ω—å —Ç”©–ª–∂ —Ö—ç–≤—à—ç—ç—Ä—ç–π.",
            ];
            break;
          case "”®—Ä –æ—Ä–ª–æ–≥—ã–Ω —Ö–∞—Ä—å—Ü–∞–∞":
            adviceList = [
              "”®—Ä –æ—Ä–ª–æ–≥—ã–Ω —Ö–∞—Ä—å—Ü–∞–∞ ”©–Ω–¥”©—Ä –±–∞–π–Ω–∞. –≠–Ω—ç –Ω—å –∑—ç—ç–ª —Ç”©–ª”©—Ö —á–∞–¥–≤–∞—Ä—Ç —Å”©—Ä–≥”©”©—Ä –Ω”©–ª”©”©–ª–¥”©–≥.",
              "–û—Ä–ª–æ–≥–æ–æ –Ω—ç–º—ç–≥–¥“Ø“Ø–ª—ç—Ö —ç—Å–≤—ç–ª ”©—Ä”©”© –±—É—É—Ä—É—É–ª–∞—Ö –∞–ª—Ö–∞–º —Ö–∏–π–≥—ç—ç—Ä—ç–π.",
            ];
            break;
          default:
            adviceList = ["–û–Ω–æ–æ–≥–æ–æ –Ω—ç–º—ç–≥–¥“Ø“Ø–ª—ç—Ö—ç–¥ –∞–Ω—Ö–∞–∞—Ä–∞—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π –±–∞–π–Ω–∞."];
        }
      }

      return {
        label,
        value: value.toFixed(1),
        maxValue: maxValue.toFixed(1),
        percent: percent.toFixed(1),
        advice: adviceList.join(" "),
      };
    });
  };

  useEffect(() => {
    if (components && components.length > 0) {
      const formattedData = generateScoringAdvice(components);
      console.log(formattedData);
      setScoringDesc(formattedData); // Set the generated data to state
    }
  }, [components]);

  // Define columns for the table
  const scoringValueCol = [
    { accessor: "label", label: "“Æ–∑“Ø“Ø–ª—ç–ª—Ç", flex: 1 },
    { accessor: "value", label: "–û–Ω–æ–æ", flex: 1 },
    { accessor: "maxValue", label: "–î—ç—ç–¥ –æ–Ω–æ–æ", flex: 1 },
    { accessor: "percent", label: "–•—É–≤—å", flex: 1 },
    { accessor: "advice", label: "–ó”©–≤–ª”©–º–∂", flex: 5 },
  ];

  return (
    <Box>
      <CustomDataGrid columns={scoringValueCol} data={scoringDesc} />
    </Box>
  );
};

export default ScoringAdvice;
