import React, { useEffect, useState } from "react";
import { Box, Typography } from "@mui/material";
import CustomDataGrid from "../../../../Components/CustomDataGrid"; // Assuming this is your DataGrid component

const ScoringAdvice = ({ components }) => {
  const [scoringDesc, setScoringDesc] = useState([]);

  const generateScoringAdvice = (components) => {
    return components.map(({ label, value, maxValue }) => {
      const percent = (value / maxValue) * 100;
      let adviceList = [];

      if (percent >= 90) {
        adviceList.push(
          "üéâ –ú–∞—à —Å–∞–π–Ω! –¢–∞ —ç–Ω—ç “Ø–∑“Ø“Ø–ª—ç–ª—Ç –¥—ç—ç—Ä ”©–Ω–¥”©—Ä –æ–Ω–æ–æ –∞–≤—Å–∞–Ω –±–∞–π–Ω–∞."
        );
      } else if (percent >= 60) {
        switch (label) {
          case "–ó—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö":
            adviceList = [
              "–¢–∞ –∑—ç—ç–ª –∞–≤—á —Ç”©–ª—Å”©–Ω —Ç—É—Ä—à–ª–∞–≥–∞—Ç–∞–π –±–æ–ª–æ–≤—á —ç–Ω—ç –Ω—å ”©–Ω–¥”©—Ä –æ–Ω–æ–æ –∞–≤–∞—Ö–∞–∞—Ä —É—Ä—Ç —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ –±–∏—à –±–∞–π–Ω–∞",
              "–®–∏–Ω—ç –∑—ç—ç–ª –∞–≤—á, —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ –Ω—å —Ç”©–ª–≤”©–ª –æ–Ω–æ–æ —Å–∞–π–∂–∏—Ä–Ω–∞.",
              "–•—É–≥–∞—Ü–∞–∞–Ω–¥ –Ω—å –∑—ç—ç–ª—ç—ç —ç—Ä–≥“Ø“Ø–ª—ç–Ω —Ç”©–ª–∂  –±–∞–π–≥–∞–∞—Ä–∞–π.",
            ];
            break;
          case "–û–¥–æ–æ–≥–∏–π–Ω ”©—Ä–∏–π–Ω —Ö—ç–º–∂—ç—ç":
            adviceList = [
              "–¢–∞–Ω—ã ”©—Ä –¥—É–Ω–¥ —Ç“Ø–≤—à–∏–Ω–¥ –±–∞–π–≥–∞–∞ —Ç—É–ª –∏–ª“Ø“Ø –∏—Ö —ç—Ä—Å–¥—ç–ª –≥–∞—Ä–≥–∞—Ö–≥“Ø–π –±–∞–π—Ö –Ω—å —á—É—Ö–∞–ª.",
              "–¶–∞–≥ —Ç—É—Ö–∞–π–¥ –Ω—å –∑—ç—ç–ª–∏–π–Ω “Ø–ª–¥—ç–≥–¥–ª—ç—ç —Ç”©–ª–∂ –¥—É—É—Å–∞—Ö –Ω—å –∑—ç—ç–ª–∂–∏—Ö –∑—ç—Ä—ç–≥–ª—ç–ª–∏–π–Ω –æ–Ω–æ–æ–≥ —Å–∞–π–∂—Ä—É—É–ª–Ω–∞.",
            ];
            break;
          case "–ó—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö–∏–π–Ω —É—Ä—Ç":
            adviceList = [
              "–¢–∞–Ω—ã –∑—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö –¥—É–Ω–¥ —Ç“Ø–≤—à–∏–Ω–¥ –±–∞–π–Ω–∞.",
              "–ò–¥—ç–≤—Ö–∏—Ç—ç–π –∑—ç—ç–ª–∏–π–Ω “Ø–ª–¥—ç–≥–¥“Ø“Ø–¥—ç—ç —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ –Ω—å —Ç”©–ª–±”©–ª –æ–Ω–æ–æ–Ω–¥ —ç–µ—Ä—ç–≥—ç—ç—Ä –Ω”©–ª”©”©–ª–Ω”©.",
            ];
            break;
          case "–®–∏–Ω—ç –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç":
            adviceList = [
              "–¢–∞ —Å“Ø“Ø–ª–∏–π–Ω 6 —Å–∞—Ä–¥ —Ö—ç–¥ —Ö—ç–¥—ç–Ω —Ö“Ø—Å—ç–ª—Ç –±“Ø—Ä—Ç–≥“Ø“Ø–ª—Å—ç–Ω –±–∞–π–Ω–∞.",
              "–ò—Ä—ç—Ö —Å–∞—Ä—É—É–¥–∞–¥ –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç “Ø“Ø—Å–≥—ç—Ö—ç—ç—Å —Ç“Ø—Ä –∑–∞–π–ª—Å—Ö–∏–π—Ö —Ö—ç—Ä—ç–≥—Ç—ç–π.",
            ];
            break;
          case "”®—Ä –æ—Ä–ª–æ–≥—ã–Ω —Ö–∞—Ä—å—Ü–∞–∞":
            adviceList = [
              "–¢–∞–Ω—ã ”©—Ä –æ—Ä–ª–æ–≥—ã–Ω —Ö–∞—Ä—å—Ü–∞–∞ –¥—É–Ω–¥ —Ç“Ø–≤—à–∏–Ω–¥ –±–∞–π–Ω–∞. –≠–Ω—ç –Ω—å —ç—Ä—Å–¥—ç–ª—Ç—ç–π –±–∞–π–∂ –±–æ–ª–∑–æ—à–≥“Ø–π.",
              "–û—Ä–ª–æ–≥–æ–æ –Ω—ç–º—ç–≥–¥“Ø“Ø–ª—ç—Ö, —ç—Å–≤—ç–ª –∑—ç—ç–ª–∏–π–Ω ”©—Ä”©”© –±–∞–≥–∞—Å–≥–∞—Ö –Ω—å –æ–Ω–æ–æ–Ω–¥ —ç–µ—Ä—ç–≥ –Ω”©–ª”©”©—Ç—ç–π.",
            ];
            break;
          default:
            adviceList = ["–°–∞–π–∂—Ä—É—É–ª–∞—Ö –±–æ–ª–æ–º–∂ –±–∞–π–Ω–∞."];
        }
      } else {
        switch (label) {
          case "–ó—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö":
            adviceList = [
              "–ó—ç—ç–ª–∏–π–Ω —ç—Ä–≥—ç–Ω —Ç”©–ª”©–ª—Ç”©”© —Ö—É–≥–∞—Ü–∞–∞–Ω–¥ –Ω—å —Ç”©–ª–∂ –±–∞–π–≥–∞–∞—Ä–∞–π.",
            ];
            break;
          case "–û–¥–æ–æ–≥–∏–π–Ω ”©—Ä–∏–π–Ω —Ö—ç–º–∂—ç—ç":
            adviceList = ["–û–¥–æ–æ–≥–∏–π–Ω ”©—Ä–∏–π–Ω —Ö—ç–º–∂—ç—ç–≥—ç—ç –±–∞–≥–∞—Å–≥–∞—Ö—ã–≥ —Ö–∏—á—ç—ç–≥—ç—ç—Ä—ç–π."];
            break;
          case "–ó—ç—ç–ª–∏–π–Ω —Ç“Ø“Ø—Ö–∏–π–Ω —É—Ä—Ç":
            adviceList = [
              "–ó—ç—ç–ª—ç—ç —Ç“Ø“Ø—Ö–∏–π–Ω —É—Ä—Ç –∏—Ö –±–∞–π—Ö –Ω—å –∑—ç—ç–ª–∏–π–Ω –æ–Ω–æ–æ–Ω–¥ —Å–∞–π–Ω–∞–∞—Ä –Ω”©–ª”©”©–ª–Ω”©.",
            ];
            break;
          case "–®–∏–Ω—ç –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç":
            adviceList = [
              "–°“Ø“Ø–ª–∏–π–Ω “Ø–µ–¥ –æ–ª–æ–Ω –∑—ç—ç–ª–∏–π–Ω —Ö“Ø—Å—ç–ª—Ç –≥–∞—Ä–≥–∞—Å–∞–Ω –±–æ–ª —Ç“Ø—Ä –∞–∑–Ω–∞–∞—Ä–∞–π.",
            ];
            break;
          case "”®—Ä –æ—Ä–ª–æ–≥—ã–Ω —Ö–∞—Ä—å—Ü–∞–∞":
            adviceList = ["–û—Ä–ª–æ–≥–æ –Ω—ç–º—ç—Ö —ç—Å–≤—ç–ª ”©—Ä –±–∞–≥–∞—Å–≥–∞—Ö –Ω—å —Ç—É—Å –±–æ–ª–Ω–æ."];
            break;
          default:
            adviceList = ["–°–∞–π–∂—Ä—É—É–ª–∞—Ö –±–æ–ª–æ–º–∂ –±–∞–π–Ω–∞."];
        }
      }

      return {
        label,
        value: value.toFixed(1),
        maxValue: maxValue.toFixed(1),
        percent: percent.toFixed(1),
        advice: adviceList.join(", "), // Join the advice into a single string for the table
      };
    });
  };

  useEffect(() => {
    if (components && components.length > 0) {
      const formattedData = generateScoringAdvice(components);
      console.log(formattedData);
      setScoringDesc(formattedData); // Set the generated data to state
    }
  }, [components]);

  // Define columns for the table
  const scoringValueCol = [
    { accessor: "label", label: "“Æ–∑“Ø“Ø–ª—ç–ª—Ç", flex: 1 },
    { accessor: "value", label: "–û–Ω–æ–æ", flex: 1 },
    { accessor: "maxValue", label: "–î—ç—ç–¥ –æ–Ω–æ–æ", flex: 1 },
    { accessor: "percent", label: "–•—É–≤—å", flex: 1 },
    { accessor: "advice", label: "–ó”©–≤–ª”©–º–∂", flex: 5 },
  ];

  return (
    <Box>
      <CustomDataGrid columns={scoringValueCol} data={scoringDesc} />
    </Box>
  );
};

export default ScoringAdvice;
